#!/usr/bin/env python3

import sys

#Para que seja possível visualizar os comandos é necessário mudar as permissões de um arquivo ou pasta no terminal
#Para isso, basta rodar o seguinte comando: chmod +x relatório_python_05_02.py
#Após isso, é necessário adicionar o comando: ./relatório_python_05_02.py

#Primeiramente, deseja-se criar uma set utilizando duas diferentes sintaxes e visualizar suas possíveis diferenças 

 #Criando set com diferentes sintaxes
mySet = set('ATGTGGG')
mySet2 = {'ATGCCT'}

 #Imprimindo as diferente sintaxes
print(mySet) 
print(mySet2) 

 #A primeira consiste na visualização das letras que aparecem no set sem que haja a sua repetição.  
 #Já a segunda toda a sequência de nucleotídeos serão levadas em consideração. 
 #Dessa forma, a maneira que um código é escrito é importante e deve ser levado em consideração para a resolução do problema 

 #Posteriormente, pretende-se encontrar a interseção, diferença, união e diferença simbólica entre estes dois conjuntos
Set_A = set(['3', '14', '15', '9', '26', '5', '35', '9'])
Set_B = set(['60', '22', '14', '0', '9'])

 #Imprimindo a interseção
print(Set_A & Set_B)

 #Imprimindo a diferença
print(Set_A - Set_B)

 #Imprimindo a união
print(Set_A | Set_B)

 #Imprimindo a symmetric diference
print(Set_A ^ Set_B)

#Criando um conjunto (set) utilizando uma sequência de DNA
Seq_DNA_set = set('GATGGGATTGGGGTTTTCCCCTCCCATGTGCTCAAGACTGGCGCTAAAAGTTTTGAGCTTCTCAAAAGTCTAGAGCCACCGTCCAGGGAGCAGGTAGCTGCTGGGCTCCGGGGACACTTTGC>
print(Seq_DNA_set) #Como resultado irá aparecer apenas uma letra do nucleotídeo que se repete , ou seja, ['A', 'C', 'T', 'G']

#Escrevendo um script que:

 #Determine os caracteres únicos desta sequência
Seq_nucleot = list('GAACTCCAAAAATGAAAACATAGTAGCAATCAAAGCATCCCACTATTTTTTGTCTCTCGTTTCATTAGCGTTGTAAATTACTGATACCCTACTATACCTCTACAAGGCCTTTGTCATCTTT>
Set_Seq_nucleot = set(Seq_nucleot)

 #Conte os caracteres da sequência e armazenar em um dicionário
count_nucleot = {}

for nucleot in sorted(Set_Seq_nucleot):
        count_nucleot_02 = Seq_nucleot.count(nucleot)
        count_nucleot[nucleot] = count_nucleot_02
        print (nucleot, count_nucleot_02)

#Armazene cada contagem em um dicionário



#Conte GC e AT
GC = (count_nucleot['G'] + count_nucleot['C'])
print (GC)

AT = (count_nucleot['A'] + count_nucleot['T'])
print (AT)
